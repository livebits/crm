<?php

namespace app\modules\api\controllers;

use app\models\UserProfile;
use Yii;
use app\components\ApiComponent;
use app\models\RegistrationFormWithProfile;
use webvimark\modules\UserManagement\models\User;
use yii\filters\auth\CompositeAuth;
use yii\filters\auth\HttpBearerAuth;
use yii\filters\ContentNegotiator;
use yii\web\Response;
use yii\widgets\ActiveForm;

class UserController extends \yii\rest\Controller
{
    public function beforeAction($action)
    {
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['contentNegotiator'] = [
            'class' => ContentNegotiator::className(),
            'formats' => [
                'application/json' => Response::FORMAT_JSON,
            ],
        ];
        $behaviors['authenticator'] = [
            'class' => CompositeAuth::className(),
            'except' => ['login', 'registration'],
            'authMethods' => [
                HttpBearerAuth::className(),
            ],
        ];

        return $behaviors;
    }

    /**
     * @api {post} /user/login 1- Login
     * @apiName 1.Login
     * @apiGroup User
     *
     * @apiParam {String} username user username.
     * @apiParam {String} password user password.
     *
     * @apiParamExample {json} Request-Example:
     *      {
     *         "username":"un",
     *         "password":"ps"
     *      }
     *
     *
     * @apiSuccess {Array} data response data.
     * @apiSuccess {String} data.token user token that authenticate user and used in other APIs in header part [ Authorization: Bearer _token_ ].
     * @apiSuccess {String} message response message.
     * @apiSuccess {Integer} code response code [0: failure, 1: success].
     * @apiSuccess {Integer} status response status code [see -status table-].
     *
     * @apiSuccessExample Success-Response:
     *     HTTP/1.1 200 OK
     *       {
     *           "data": [
     *               {
     *                   "token": "PxLW4zFl3f_rRaEkd4DSVsGx_SZuBqNL"
     *               }
     *           ],
     *           "message": "",
     *           "code": 1,
     *           "status0": 200
     *       }
     *
     *
     * @apiError IncorrectUsernamePassword
     * @apiErrorExample Error-Response 1001:
     *     HTTP/1.1 400 Bad request
     *     {
     *         "data": [],
     *         "message": "Username or password is incorrect",
     *         "code": 0,
     *         "status": 1001
     *     }
     *
     *
     * @apiError EnterRequiredInputs
     * @apiErrorExample Error-Response 1000:
     *     HTTP/1.1 400Bad request
     *     {
     *         "data": [],
     *         "message": "Enter required data",
     *         "code": 0,
     *         "status": 1000
     *     }
     */
    public function actionLogin()
    {
        $request = ApiComponent::parseInputData();

        if(isset($request['username']) && isset($request['password'])){

            $user = User::findByUsername($request['username']);
            if(isset($user) && \Yii::$app->getSecurity()->validatePassword($request['password'], $user->password_hash)) {
                $data = [];
                $data['info'] = $user;
                $data['token'] = $user->auth_key;
                $data['role'] = \app\models\User::getRole($user->id);
                return ApiComponent::successResponse('', $data, true);

            } else {
                return ApiComponent::errorResponse([], 1001);
            }
        } else {
            return ApiComponent::errorResponse([], 1000);
        }
    }

    public function actionRegistration() {
        $request = ApiComponent::parseInputData();

        if(isset($request['username']) && isset($request['password']) && isset($request['email'])
        && isset($request['repeat_password']) && isset($request['firstName']) && isset($request['lastName'])){

//            $model = new RegistrationFormWithProfile();
//            $requestModified = ["RegistrationFormWithProfile" => $request];
//
//            if ( $model->load($requestModified) AND $model->validate() )
//            {
                $userModel = new User(['scenario'=>'newUser']);

                $requestModified = ["User" => $request];
                if ( $userModel->load($requestModified) && $userModel->save())
                {
//                    User::updateAll(['email' => $request['email']], ['id' => $user->id]);

                    $roles = ['customer'];
                    foreach ($roles as $role)
                    {
                        User::assignRole($userModel->id, $role);
                    }

                    //save profile
                    $model = new UserProfile();
                    $model->user_id = $userModel->id;
                    $model->firstName = $request['firstName'];
                    $model->lastName = $request['lastName'];
                    $model->save(false);

                    return ApiComponent::successResponse('user created successfully', $userModel, true);
                }

                return ApiComponent::errorResponse($userModel->getErrors(), 400);
//            }
//
//            return ApiComponent::errorResponse($model->getErrors(), 400);
        } else {
            return ApiComponent::errorResponse([], 1000);
        }
    }

}